"use strict";(self.webpackChunkweb=self.webpackChunkweb||[]).push([[5603],{5110:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var r=n(9703);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=u(n),f=o,m=d["".concat(c,".").concat(f)]||d[f]||s[f]||i;return n?r.createElement(m,a(a({ref:t},p),{},{components:n})):r.createElement(m,a({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var u=2;u<i;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},476:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return p}});var r=n(2922),o=n(9230),i=(n(9703),n(5110)),a=["components"],l={sidebar_position:3},c="Backend: dev setup",u={unversionedId:"guides/how_to_contribute/backend_development",id:"guides/how_to_contribute/backend_development",isDocsHomePage:!1,title:"Backend: dev setup",description:"We use pre-commit to enforce code styles on the code base (using black for Python and prettier for Javascript).",source:"@site/docs/guides/how_to_contribute/backend_development.md",sourceDirName:"guides/how_to_contribute",slug:"/guides/how_to_contribute/backend_development",permalink:"/docs/guides/how_to_contribute/backend_development",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/guides/how_to_contribute/backend_development.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"guides",previous:{title:"Frontend: dev setup",permalink:"/docs/guides/how_to_contribute/frontend_development"},next:{title:"Migrating Run Scripts",permalink:"/docs/guides/upgrade_to_1/run_scripts"}},p=[{value:"Local development mode",id:"local-development-mode",children:[],level:2}],s={toc:p};function d(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"backend-dev-setup"},"Backend: dev setup"),(0,i.kt)("p",null,"We use ",(0,i.kt)("a",{parentName:"p",href:"https://pre-commit.com/"},"pre-commit")," to enforce code styles on the code base (using ",(0,i.kt)("inlineCode",{parentName:"p"},"black")," for Python and ",(0,i.kt)("inlineCode",{parentName:"p"},"prettier")," for Javascript)."),(0,i.kt)("p",null,"To setup your local codebase to auto-lint and avoid lint test failures for your PRs, please set up pre-commit for your local repo as such:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"pip install pre-commit")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"pre-commit install")," to install git hooks"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"pre-commit run --all-files")," (optional - run ad-hoc against all files)")),(0,i.kt)("h2",{id:"local-development-mode"},"Local development mode"),(0,i.kt)("p",null,"If you've installed Mephisto via ",(0,i.kt)("inlineCode",{parentName:"p"},"pip install mephisto")," in the past, in order to get python to use your local version of the package, navigate to your ",(0,i.kt)("inlineCode",{parentName:"p"},"Mephisto")," folder and run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"pip install -e .\n")),(0,i.kt)("p",null,"This will ensure that your local changes are used in the running version of Mephisto"))}d.isMDXComponent=!0},2922:function(e,t,n){function r(){return r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},r.apply(this,arguments)}n.d(t,{Z:function(){return r}})},9230:function(e,t,n){function r(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}n.d(t,{Z:function(){return r}})}}]);